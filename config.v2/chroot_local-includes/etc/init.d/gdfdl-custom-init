#!/bin/bash

### BEGIN INIT INFO
# Provides:          gdfdl-custom-init
# Required-Start:    mysql
# Required-Stop:
# X-Start-Before:    apache2 freeswitch gdfdl-init
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Do initial task for first startup of Gemeinschaft
# Description:       
### END INIT INFO

# General settings
[ -f /gdfdl.conf ] && source /gdfdl.conf
[ -f /gdfdl-custom.conf ] && source /gdfdl-custom.conf
set -e

if [[ x`cat /proc/cmdline | grep boot=live` != x"" ]]
	then
	LIVE=true
else
	LIVE=false
fi

case "$1" in
	start)
		# Post-Installation setup for Gemeinschaft 5
		#

		echo -e "Preparing Gemeinschaft for 1st start ...\n"

		# Change primary group of GS system admin to GS_GROUP
		#
		set +e
		usermod -g ${GS_GROUP} gsmaster 2>&1 >/dev/null
		groupdel gsmaster 2>&1 >/dev/null
		set -e

		# Generate new password for gsmaster system administrator for live system
		if [[ "${LIVE}" == true ]]; then
			echo "** Generating individual password for live-system user 'gsmaster'"
			apg -m10 -a0 -n 1 -M l > "/home/gsmaster/.password"
			GSMASTER_PASSWORD="`cat /home/gsmaster/.password`"
			chown gsmaster "/home/gsmaster/.password"
			chmod 400 "/home/gsmaster/.password"
			echo -e "${GSMASTER_PASSWORD}\n${GSMASTER_PASSWORD}" | (passwd gsmaster)
		fi

		# Database setup
		#
		
		# Change MySQL password for user root
		if [ ! -f /root/.mysql_root_password ]
			then
			echo "** Generating individual password for MySQL user 'root'"
			apg -m30 -a0 -n 1 -M NCL > /root/.mysql_root_password
			chmod 0440 /root/.mysql_root_password
			MYSQL_PASSWD_ROOT="`cat /root/.mysql_root_password`"
			mysql -e "USE mysql; DELETE FROM user WHERE user='root' AND NOT (host='localhost' OR host='127.0.0.1'); UPDATE user SET password=PASSWORD('${MYSQL_PASSWD_ROOT}') WHERE user='root' AND (host='localhost' OR host='127.0.0.1'); FLUSH PRIVILEGES;" --user=root --password="${MYSQL_PASSWD}"
		else
			MYSQL_PASSWD_ROOT="`cat /root/.mysql_root_password`"
		fi

		# Load timezone information into database
		echo "** Loading timezone information into MySQL database"
		mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql mysql --user=root --password="${MYSQL_PASSWD_ROOT}"
		/etc/init.d/mysql restart

		# Create MySQL user for Gemeinschaft
		if [ ! -f "/var/lib/${GS_USER}/.gs_mysql_password" ]
			then
			echo "** Creating MySQL user 'gemeinschaft'"
			apg -m30 -a0 -n 1 -M NCL > "/var/lib/${GS_USER}/.gs_mysql_password"
			chown ${GS_USER}.${GS_GROUP} "/var/lib/${GS_USER}/.gs_mysql_password"
			chmod 0440 "/var/lib/${GS_USER}/.gs_mysql_password"
			MYSQL_PASSWD_GS="`cat "/var/lib/${GS_USER}/.gs_mysql_password"`"
			mysql -e "GRANT ALL PRIVILEGES ON gemeinschaft.* TO gemeinschaft @'localhost' IDENTIFIED BY '${MYSQL_PASSWD_GS}'; FLUSH PRIVILEGES;" --user=root --password="${MYSQL_PASSWD_ROOT}"
		else
			MYSQL_PASSWD_GS="`cat "/var/lib/${GS_USER}/.gs_mysql_password"`"
		fi

		# Generate ODBC configuration files
		echo "** Configuring ODBC"
echo "[gemeinschaft]
Description  = MySQL database for Gemeinschaft
Driver       = /usr/lib/odbc/libmyodbc.so
Setup        = /usr/lib/odbc/libodbcmyS.so
" >/etc/odbcinst.ini

echo "[gemeinschaft]
Description  = MySQL database for Gemeinschaft
Driver       = /usr/lib/odbc/libmyodbc.so
SERVER       = localhost
PORT         = 3306
DATABASE     = gemeinschaft
OPTION       = 67108864
USER         = gemeinschaft
PASSWORD     = ${MYSQL_PASSWD_GS}
" >/var/lib/freeswitch/.odbc.ini
chmod 644 /var/lib/freeswitch/.odbc.ini
chown freeswitch.freeswitch /var/lib/freeswitch/.odbc.ini

		# (re)create Gemeinschaft database
		echo "** Creating MySQL database 'gemeinschaft'"
		mysql -e "DROP DATABASE IF EXISTS gemeinschaft; CREATE DATABASE gemeinschaft CHARACTER SET utf8 COLLATE utf8_general_ci;" --user=root --password="${MYSQL_PASSWD_ROOT}"

		# Update database password in Gemeinschaft config
		echo "** Updating Gemeinschaft with new MySQL password"
		sed -i "s/password: gemeinschaft/password: ${MYSQL_PASSWD_GS}/" "${GS_DIR}/config/database.yml"

		# Update database password in FreeSwitch configs
		echo "** Updating FreeSwitch with new MySQL password"
		sed -i "s/password = gemeinschaft/password = ${MYSQL_PASSWD_GS}/" "${GS_DIR}/misc/freeswitch/scripts/ini/database.ini"
		sed -i "s/odbc-dsn = gemeinschaft:gemeinschaft:gemeinschaft/odbc-dsn = gemeinschaft:gemeinschaft:${MYSQL_PASSWD_GS}/" "${GS_DIR}/misc/freeswitch/scripts/ini/sofia.ini"
		sed -i "s/<param name=\"core-db-dsn\" value=\"gemeinschaft:gemeinschaft:gemeinschaft\"\/>/<param name=\"core-db-dsn\" value=\"gemeinschaft:gemeinschaft:${MYSQL_PASSWD_GS}\"\/>/" "${GS_DIR}/misc/freeswitch/conf/freeswitch.xml"
		sed -i "s/<param name=\"odbc-dsn\" value=\"gemeinschaft:gemeinschaft:gemeinschaft\"\/>/<param name=\"odbc-dsn\" value=\"gemeinschaft:gemeinschaft:${MYSQL_PASSWD_GS}\"\/>/" "${GS_DIR}/misc/freeswitch/conf/freeswitch.xml"

		# Lower debug levels for productive installations
		[ -f /etc/gdfdl_build ] && BUILD=`cat /etc/gdfdl_build` || BUILD=1234567890
		if [[ `expr length ${BUILD}` == 10 ]]; then
			/usr/local/bin/gs-change-state.sh production

		# Enforce higher debug levels for development installations
		else
			/usr/local/bin/gs-change-state.sh development
		fi

		# Load database structure into DB
		#
		echo "** Initializing database"
		su - ${GS_USER} -c "cd ${GS_DIR}; RAILS_ENV=production bundle exec rake db:migrate --trace 2>&1 >/var/log/gemeinschaft/setup.log"

		# Generate assets (like CSS)
		#
		echo "** Precompile GS assets"
		su - ${GS_USER} -c "cd \"${GS_DIR}\"; RAILS_ENV=production bundle exec rake assets:precompile --trace 2>&1 >>/var/log/gemeinschaft/setup.log"

		# self destruction
		#
		rm -rf /gdfdl-custom.conf
		rm -rf /etc/init.d/gdfdl-custom-init; update-rc.d gdfdl-custom-init remove
		;;

	stop)
		# nothing to do
		;;
	*)
		echo "Undefined usage."
		exit 3
		;;
esac
